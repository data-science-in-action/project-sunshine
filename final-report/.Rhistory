geom_text(aes(x=JD,y=WD,label=province),data=capdate)+
scale_fill_manual(values = brewer.pal(4,"Blues"))
print(p)
p=ggplot(df_map)+
geom_polygon(aes(x=long,y=lat,group=group,fill=type),
colour="white")+
labs(title="聚类结果可视化分析")+
geom_text(aes(x=JD,y=WD,label=province),data=capdate)+
scale_fill_manual(values = brewer.pal(4,"Blues"))
print(p)
library(ggplot2)
kind <- rep(c("食品烟酒","医疗保健"), each = 4)
type <- rep(c('第1类','第2类','第3类','第4类'),times = 2)
index <- c(109.4,118.92,111.35,115.31,102.2,101.51,111.3,101.67)
df <- data.frame(kind=kind, type = type, index = index)
ggplot(data = df, mapping = aes(x = kind,y = index,fill = type))+
geom_bar(stat ='identity',position = 'dodge')+
coord_cartesian(ylim=c(90,120))
library(ggplot2)
kind <- rep(c("Food alcohol and tobacco","Health care"), each = 4)
type <- rep(c('1','2','3','4'),times = 2)
index <- c(109.4,118.92,111.35,115.31,102.2,101.51,111.3,101.67)
df <- data.frame(kind=kind, type = type, index = index)
ggplot(data = df, mapping = aes(x = kind,y = index,fill = type))+
geom_bar(stat ='identity',position = 'dodge')+
coord_cartesian(ylim=c(90,120))
p=ggplot(df_map)+
geom_polygon(aes(x=long,y=lat,group=group,fill=type),
colour="white")+
geom_text(aes(x=JD,y=WD,label=province),data=capdate)+
scale_fill_manual(values = brewer.pal(4,"Blues"))
print(p)
library(jsonlite)
library(rjson)
library(RJSONIO)
library(ggplot2)
library(RColorBrewer)
library(lubridate)
library(plyr)
library(dplyr)
library(sp)
library(rgdal)
library(maptools)
china=readOGR('C:/Users/LENOVO/Desktop/final-repor/china-province-border-data/bou2_4p.shp')
chinamap<-fortify(china)
x <- china@data
xs<-data.frame(x,id=seq(0:924)-1)
china_mapdata<-join(chinamap, xs, type = "full")
unique(china@data$NAME)
fl=read.csv("C:/Users/LENOVO/Desktop/final-repor/map.csv",sep=",")
capdate=read.csv("C:/Users/LENOVO/Desktop/final-repor/province.csv",header=TRUE,sep=",")
totalconfirm=data.frame(NAME=fl$NAME,
type=cut(fl$type,breaks=c(1,2,3,4,5),
labels=c("1","2","3","4"),
order = TRUE,include.lowest = T,right = F))
df_map<-join(china_mapdata,totalconfirm,type="full")
p=ggplot(df_map)+
geom_polygon(aes(x=long,y=lat,group=group,fill=type),
colour="white")+
geom_text(aes(x=JD,y=WD,label=province),data=capdate)+
scale_fill_manual(values = brewer.pal(4,"Blues"))
print(p)
library(ggplot2)
library(reshape2)
data<-read.csv("C:/Users/LENOVO/Desktop/final-repor/COVID-19(2).csv")
data<-melt(data,id.vars = 'day', variable.name = "类型",value.name = "num")
ggplot(data = data, mapping = aes(x = day, y = num, colour = 类型 , group = 类型))+geom_line(size = 0.5) + geom_point(size = 1.5)+
theme(axis.text.x = element_text(angle = 60, hjust = 0.5, vjust =0.5 ,size = 8))
library(ggplot2)
library(reshape2)
data<-read.csv("C:/Users/LENOVO/Desktop/final-repor/COVID-19(2).csv")
data<-melt(data,id.vars = 'day', variable.name = "类型",value.name = "num")
ggplot(data = data, mapping = aes(x = day, y = num, colour = 类型 , group = 类型))+geom_line(size = 0.5) + geom_point(size = 1.5)+
theme(axis.text.x = element_text(angle = 60, hjust = 0.5, vjust =0.5 ,size = 8))
library(tseries)
library(forecast)
library(zoo)
library(stats)
y=read.csv('C:/Users/LENOVO/Desktop/final-repor/trscg.csv',header = T)
TRSCG=ts(y$TRSCG, frequency=12, start=c(2008, 1))
plot.ts(TRSCG, col=4, xlab="时间", ylab="TRSCG")
library(tseries)
library(forecast)
library(zoo)
library(stats)
y=read.csv('C:/Users/LENOVO/Desktop/final-repor/trscg.csv',header = T)
TRSCG=ts(y$TRSCG, frequency=12, start=c(2008, 1))
plot.ts(TRSCG, col=4, xlab="时间", ylab="TRSCG")
library(ggplot2)
df <- data.frame(type = rep(c("real", "predictive"), each=3),
time=c("2020.1-2", "2020.3", "2020.4"),
trscg=c(52129.8, 26450, 28177.8, 68062.55, 32900.22, 35270.23) )
ggplot(data=df, mapping=aes(x=time, y=trscg, group=type)) +
geom_line(aes(color=type))+
geom_point(aes(color=type))+
theme(legend.position="top")
library(ggplot2)
df <- data.frame(type = rep(c("real", "predictive"), each=3),
time=c("2020.1-2", "2020.3", "2020.4"),
input=c(2995.44, 1652.13, 1549.01, 3459.83, 2049.53, 2026.96) )
ggplot(data=df, mapping=aes(x=time, y=input, group=type)) +
geom_line(aes(color=type))+
geom_point(aes(color=type))+
theme(legend.position="top")
library(tseries)
library(forecast)
library(zoo)
library(stats)
y=read.csv('C:/Users/LENOVO/Desktop/final-repor/trscg.csv',header = T)
TRSCG=ts(y$TRSCG, frequency=12, start=c(2008, 1))
plot.ts(TRSCG, col=4, xlab="时间", ylab="TRSCG")
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
tsdisplay(diff2)
library(tseries)
library(forecast)
library(zoo)
library(stats)
y=read.csv('C:/Users/LENOVO/Desktop/final-repor/trscg.csv',header = T)
TRSCG=ts(y$TRSCG, frequency=12, start=c(2008, 1))
plot.ts(TRSCG, col=4, xlab="时间", ylab="TRSCG")
par(mfrow = c(1, 2))
plot(acf(diff2))
plot(pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2))
plot(pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2))
plot(pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2),pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot.acf(diff2)
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
plot(acf(diff2),pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2),pacf(diff2))
par(mfrow = c(1, 2))
plot(acf(diff2))
plot(pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2))
plot(pacf(diff2))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2),xlim=c(0,1.5),ylim=c(-0.8,0.8))
plot(pacf(diff2),xlim=c(0,1.5),ylim=c(-0.8,0.8))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
plot(acf(diff2),xlim=c(0,1.5),ylim=c(-0.8,0.8))
plot(pacf(diff2),xlim=c(0,1.5),ylim=c(-0.8,0.8),cex.axis=2)
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2),mfcol=c(1, 2))
plot(acf(diff2),xlim=c(0,1.5),ylim=c(-0.8,0.8))
plot(pacf(diff2),xlim=c(0,1.5),ylim=c(-0.8,0.8))
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
acf(diff2)
pacf(diff2)
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
acf(diff2)
pacf(diff2)
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
acf(diff2)
pacf(diff2)
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
acf(diff2)
pacf(diff2)
knitr::opts_chunk$set(echo = TRUE)
#加载GM(1,1)源文件
gm11<-function(x0,t){ #x0为输入序列，t为预测个数
x1<-cumsum(x0) #一次累加生成序列1-AG0序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){ #生成x1的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b} #得序列b，即为x1的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2:length(x0)]
alpha<-M%*%BT%*%YN  #模型的最小二乘估计参数列满足alpha尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
cat("GM(1,1)参数估计值：",'\n',"发展系数-a=",-a,"  ","灰色作用量u=",u,'\n','\n') #利用最小二乘法求得参数估计值a,u
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
for(w in 1:(t-1)){  #将a,u的估计值代入时间响应序列函数计算x1拟合序列y
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){ #运用后减运算还原得模型输入序列x0预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s]) #得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
#后验差比值检验
avge<-mean(abs(e));esum<-sum((abs(e)-avge)^2);evar=esum/(length(e)-1);se=sqrt(evar)  #计算残差的方差se
avgx0<-mean(x0);x0sum<-sum((x0-avgx0)^2);x0var=x0sum/(length(x0));sx=sqrt(x0var)  #计算原序列x0的方差sx
cv<-se/sx  #得验差比值
cat("后验差比值检验:",'\n',"C值=",cv,'\n')#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
if(cv < 0.35){
cat("C值<0.35, GM(1,1)预测精度等级为：优",'\n','\n')
}else{
if(cv<0.5){
cat("C值属于[0.35,0.5), GM(1,1)模型预测精度等级为：合格",'\n','\n')
}else{
if(cv<0.65){
cat("C值属于[0.5,0.65), GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C值>=0.65, GM(1,1)模型预测精度等级为：不合格",'\n','\n')
}
}
}
}
x0<-c(34.5069,31.6484,36.2681,39.7836,41.3331,42.9211,44.1892,43.6123,42.1970,43.5924,45.6557,45.6305)
gm11(x0,length(x0)+1)
#加载GM(1,1)源文件
gm11<-function(x0,t){ #x0为输入序列，t为预测个数
x1<-cumsum(x0) #一次累加生成序列1-AG0序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){ #生成x1的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b} #得序列b，即为x1的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2:length(x0)]
alpha<-M%*%BT%*%YN  #模型的最小二乘估计参数列满足alpha尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
cat("GM(1,1)参数估计值：",'\n',"发展系数-a=",-a,"  ","灰色作用量u=",u,'\n','\n') #利用最小二乘法求得参数估计值a,u
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
for(w in 1:(t-1)){  #将a,u的估计值代入时间响应序列函数计算x1拟合序列y
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){ #运用后减运算还原得模型输入序列x0预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s]) #得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
#后验差比值检验
avge<-mean(abs(e));esum<-sum((abs(e)-avge)^2);evar=esum/(length(e)-1);se=sqrt(evar)  #计算残差的方差se
avgx0<-mean(x0);x0sum<-sum((x0-avgx0)^2);x0var=x0sum/(length(x0));sx=sqrt(x0var)  #计算原序列x0的方差sx
cv<-se/sx  #得验差比值
cat("后验差比值检验:",'\n',"C值=",cv,'\n')#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
if(cv < 0.35){
cat("C值<0.35, GM(1,1)预测精度等级为：优",'\n','\n')
}else{
if(cv<0.5){
cat("C值属于[0.35,0.5), GM(1,1)模型预测精度等级为：合格",'\n','\n')
}else{
if(cv<0.65){
cat("C值属于[0.5,0.65), GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C值>=0.65, GM(1,1)模型预测精度等级为：不合格",'\n','\n')
}
}
}
}
x0<-c(34.5069,31.6484,36.2681,39.7836,41.3331,42.9211,44.1892,43.6123,42.1970,43.5924,45.6557,45.6305)
gm11(x0,length(x0)+1)
#加载GM(1,1)源文件
gm11<-function(x0,t){ #x0为输入序列，t为预测个数
x1<-cumsum(x0) #一次累加生成序列1-AG0序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){ #生成x1的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b} #得序列b，即为x1的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2:length(x0)]
alpha<-M%*%BT%*%YN  #模型的最小二乘估计参数列满足alpha尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
cat("GM(1,1)参数估计值：",'\n',"发展系数-a=",-a,"  ","灰色作用量u=",u,'\n','\n') #利用最小二乘法求得参数估计值a,u
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
for(w in 1:(t-1)){  #将a,u的估计值代入时间响应序列函数计算x1拟合序列y
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){ #运用后减运算还原得模型输入序列x0预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s]) #得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
#后验差比值检验
avge<-mean(abs(e));esum<-sum((abs(e)-avge)^2);evar=esum/(length(e)-1);se=sqrt(evar)  #计算残差的方差se
avgx0<-mean(x0);x0sum<-sum((x0-avgx0)^2);x0var=x0sum/(length(x0));sx=sqrt(x0var)  #计算原序列x0的方差sx
cv<-se/sx  #得验差比值
cat("后验差比值检验:",'\n',"C值=",cv,'\n')#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
if(cv < 0.35){
cat("C值<0.35, GM(1,1)预测精度等级为：优",'\n','\n')
}else{
if(cv<0.5){
cat("C值属于[0.35,0.5), GM(1,1)模型预测精度等级为：合格",'\n','\n')
}else{
if(cv<0.65){
cat("C值属于[0.5,0.65), GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C值>=0.65, GM(1,1)模型预测精度等级为：不合格",'\n','\n')
}
}
}
}
x0<-c(34.5069,31.6484,36.2681,39.7836,41.3331,42.9211,44.1892,43.6123,42.1970,43.5924,45.6557,45.6305)
gm11(x0,length(x0)+1)
#加载GM(1,1)源文件
gm11<-function(x0,t){ #x0为输入序列，t为预测个数
x1<-cumsum(x0) #一次累加生成序列1-AG0序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){ #生成x1的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b} #得序列b，即为x1的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2:length(x0)]
alpha<-M%*%BT%*%YN  #模型的最小二乘估计参数列满足alpha尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
cat("GM(1,1)参数估计值：",'\n',"发展系数-a=",-a,"  ","灰色作用量u=",u,'\n','\n') #利用最小二乘法求得参数估计值a,u
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
for(w in 1:(t-1)){  #将a,u的估计值代入时间响应序列函数计算x1拟合序列y
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){ #运用后减运算还原得模型输入序列x0预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s]) #得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
#后验差比值检验
avge<-mean(abs(e));esum<-sum((abs(e)-avge)^2);evar=esum/(length(e)-1);se=sqrt(evar)  #计算残差的方差se
avgx0<-mean(x0);x0sum<-sum((x0-avgx0)^2);x0var=x0sum/(length(x0));sx=sqrt(x0var)  #计算原序列x0的方差sx
cv<-se/sx  #得验差比值
cat("后验差比值检验:",'\n',"C值=",cv,'\n')#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
if(cv < 0.35){
cat("C值<0.35, GM(1,1)预测精度等级为：优",'\n','\n')
}else{
if(cv<0.5){
cat("C值属于[0.35,0.5), GM(1,1)模型预测精度等级为：合格",'\n','\n')
}else{
if(cv<0.65){
cat("C值属于[0.5,0.65), GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C值>=0.65, GM(1,1)模型预测精度等级为：不合格",'\n','\n')
}
}
}
}
x0<-c(34.5069,31.6484,36.2681,39.7836,41.3331,42.9211,44.1892,43.6123,42.1970,43.5924,45.6557,45.6305)
gm11(x0,length(x0)+1)
library(tseries)
library(forecast)
library(zoo)
library(stats)
y=read.csv('C:/Users/LENOVO/Desktop/final-repor/trscg.csv',header = T)
TRSCG=ts(y$TRSCG, frequency=12, start=c(2008, 1))
plot.ts(TRSCG, col=4, xlab="时间", ylab="TRSCG")
library(ggplot2)
df <- data.frame(type = rep(c("real", "predictive"), each=3),
time=c("2020.1-2", "2020.3", "2020.4"),
trscg=c(52129.8, 26450, 28177.8, 68062.55, 32900.22, 35270.23) )
ggplot(data=df, mapping=aes(x=time, y=trscg, group=type)) +
geom_line(aes(color=type))+
geom_point(aes(color=type))+
theme(legend.position="top")
diff1<-diff(TRSCG)
diff2=diff(diff1,12)
par(mfrow = c(1, 2))
acf(diff2)
pacf(diff2)
library(tseries)
library(forecast)
library(zoo)
library(stats)
y=read.csv('C:/Users/LENOVO/Desktop/final-repor/trscg.csv',header = T)
TRSCG=ts(y$TRSCG, frequency=12, start=c(2008, 1))
plot.ts(TRSCG, col=4, xlab="time", ylab="TRSCG")
library(ggplot2)
library(reshape2)
data<-read.csv("C:/Users/LENOVO/Desktop/final-repor/COVID-19.csv")
data<-melt(data,id.vars = 'day', variable.name = "type",value.name = "num")
ggplot(data = data, mapping = aes(x = day, y = num, colour = type , group = type))+geom_line(size = 0.5) + geom_point(size = 1.5)+
theme(axis.text.x = element_text(angle = 60, hjust = 0.5, vjust =0.5 ,size = 8))
library(ggplot2)
data<-read.csv("C:/Users/LENOVO/Desktop/final-repor/trscg.csv")
data1<-data
data1$time<-factor(data1$time)
p=ggplot(data1, aes(x=time, y=TRSCG, group=1)) + geom_line()+
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
print(p)
library(ggplot2)
data<-read.csv("data/trscg.csv")
data1<-data
data1$time<-factor(data1$time)
p=ggplot(data1, aes(x=time, y=TRSCG, group=1)) + geom_line()+
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
print(p)
